name: 🚀 Deploy
on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 📥 Download deps
        run: pnpm install --ignore-scripts

      - name: 🖼 Build icons
        run: pnpm run build

      - name: 🔬 Lint
        run: pnpm run lint

  typecheck:
    name: ʦ TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 📥 Download deps
        run: pnpm install --ignore-scripts

      - name: 🛠 Setup Database
        run: pnpm run generate

      - name: 🖼 Build icons
        run: pnpm run build

      - name: 🔎 Type check
        run: pnpm run typecheck

  vitest:
    name: ⚡ Vitest
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 📥 Download deps
        run: pnpm install --ignore-scripts

      - name: 🏄 Copy test env vars
        run: cp apps/epic-app/.env.example apps/epic-app/.env

      - name: 🛠 Setup Database
        run: pnpm run generate

      - name: 🖼 Build icons
        run: pnpm run build

      - name: ⚡ Run vitest
        run: pnpm run test

  playwright:
    name: 🎭 Playwright
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 🏄 Copy test env vars
        run: cp ./apps/epic-app/.env.example ./apps/epic-app/.env

      - uses: pnpm/action-setup@v2.4.0
        with:
          version: 8

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'

      - name: 📥 Install Playwright Browsers
        run: pnpm run test:e2e:install

      - name: 🛠 Setup Database
        run: pnpm run db:migrate:force

      - name: 🏦 Cache Database
        id: db-cache
        uses: actions/cache@v3
        with:
          path: prisma/data.db
          key:
            db-cache-schema_${{
            hashFiles('./apps/epic-stack/prisma/schema.prisma')
            }}-migrations_${{
            hashFiles('./apps/epic-stack/prisma/migrations/*/migration.sql') }}

      - name: 🌱 Seed Database
        if: steps.db-cache.outputs.cache-hit != 'true'
        run: pnpm db:seed
        env:
          MINIMAL_SEED: true

      - name: 🏗 Build
        run: pnpm run build

      - name: 🎭 Playwright tests
        run: pnpm run test:e2e:run

      - name: 📊 Upload report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  build:
    name: 🐳 Build
    # only build/deploy main branch on pushes
    if:
      ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') &&
      github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'apps/epic-app/fly.toml'
          field: 'app'

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: v0.9.1

      # Setup cache
      - name: ⚡️ Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🔑 Fly Registry Auth
        uses: docker/login-action@v2
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: 🐳 Docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: apps/epic-app/other/Dockerfile
          push: true
          tags:
            registry.fly.io/${{ steps.app_name.outputs.value }}:${{
            github.ref_name }}-${{ github.sha }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: 🚚 Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    # needs: [lint, typecheck, vitest, playwright, build]
    needs: [lint, typecheck, vitest, build]
    # only build/deploy main branch on pushes
    if:
      ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') &&
      github.event_name == 'push' }}

    steps:
      - name: 🛑 Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.11.0

      - name: ⬇️ Checkout repo
        uses: actions/checkout@v4

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: 'apps/epic-app/fly.toml'
          field: 'app'

      - name: 🚀 Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: superfly/flyctl-actions@v1.4
        with:
          args:
            'deploy --app ${{ steps.app_name.outputs.value }}-staging --config
            ./apps/epic-app/fly.toml --image registry.fly.io/${{
            steps.app_name.outputs.value }}:${{ github.ref_name }}-${{
            github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: superfly/flyctl-actions@v1.4
        with:
          args:
            'deploy --config ./apps/epic-app/fly.toml --image
            registry.fly.io/${{ steps.app_name.outputs.value }}:${{
            github.ref_name }}-${{ github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
